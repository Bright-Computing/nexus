/*
 * Copyright (c) 2004-2010 Bright Computing, Inc. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Bright Computing, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Bright Computing, Inc.
 */



package com.edw.json;

import com.edw.bean.cmLogin;
import com.edw.bean.MainReq;
import com.edw.bean.cmLogout;
import com.edw.bean.jobSubmit;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.ArrayList;  
import java.util.Arrays;
import java.util.Collections;  
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.net.URL;
import java.io.Console;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.entity.StringEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.client.params.CookiePolicy;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpService;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.Cookie;


    //


public class JSonRequestor {

    public JSonRequestor() {
    }

    private HttpClient getNewHttpClient() {
    	try {
    		KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
    		trustStore.load(null, null);
    		MySSLSocketFactory sf = new MySSLSocketFactory(trustStore);
    		sf.setHostnameVerifier(MySSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
     
    		HttpParams params = new BasicHttpParams();
    		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
    		HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
     
    		SchemeRegistry registry = new SchemeRegistry();
    		registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    		registry.register(new Scheme("https", sf, 443));
     
    		ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);
    		return new DefaultHttpClient(ccm, params);
    	} catch (Exception e) {
    		return new DefaultHttpClient();
    	}
    }
    
    
    
    private void AuthRequest(String myURL) {
        URL serverURL = null;
        try {
        	
//        	Console cnsl = null;
//        	String  username = null;
//        	char [] passwd = null;
//        	
//        	cnsl = System.console();
//        	
//        	if (cnsl !=null){
//        		username = cnsl.readLine("Username: ");
//        		passwd = cnsl.readPassword("Password: ");
//        	}
//           
//			String pwd = new String(passwd);
//            cmLogin loginReq = new cmLogin();
        	
        	cmLogin loginReq = new cmLogin();
            loginReq.setService("login");
            loginReq.setUsername("root");
            loginReq.setPassword("system");
                       
            
  
            Gson g = new Gson();
            String json = g.toJson(loginReq);          
            System.out.println("JSON Request No. 1 " + json);
            
            /*HttpClient httpclient = new DefaultHttpClient(); */
            
            
          
            HttpClient httpclient = getNewHttpClient();
            
         // Create a local instance of cookie store
            CookieStore cookieStore = new BasicCookieStore();

            // Create local HTTP context
            HttpContext localContext = new BasicHttpContext();
            // Bind custom cookie store to the local context
            localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);

            
            HttpPost httppost = new HttpPost(myURL);
            StringEntity stringEntity = new StringEntity(json);           
            stringEntity.setContentType("application/json");            
            httppost.setEntity(stringEntity);
            
            System.out.println("executing request " + httppost.getRequestLine());
            HttpResponse response = httpclient.execute(httppost,localContext);
            List<Cookie> cookies = cookieStore.getCookies();
            System.out.println(response);
            for (Cookie c : ((AbstractHttpClient) httpclient).getCookieStore().getCookies())
            {
                System.out.println("Cookie: " + c.toString());
            }
      
            HttpEntity resEntity = response.getEntity();
            
            System.out.println("----------------------------------------");
            System.out.println(response.getStatusLine());
            if (resEntity != null) {
                System.out.println("Response content length: " + resEntity.getContentLength());
                System.out.println("Chunked?: " + resEntity.isChunked());
                System.out.println(EntityUtils.toString(resEntity));
            }
            EntityUtils.consume(resEntity);
            
            
                        
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
       
   
        
    }
    
    
    private void doRequest(String jsonReq,  String jsonReq1, String myURL) {
        URL serverURL = null;
        try {
            



            /*HttpClient httpclient = new DefaultHttpClient(); */
            
            HttpClient httpclient = getNewHttpClient();
            CookieStore cookieStore = new BasicCookieStore();
            HttpContext localContext = new BasicHttpContext();
            localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
            /*httpclient = WebClientDevWrapper.wrapClient(httpclient);
           */
            httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.BROWSER_COMPATIBILITY);
        
            HttpPost httppost = new HttpPost(myURL);
            StringEntity stringEntity = new StringEntity(jsonReq);
            stringEntity.setContentType("application/json");
            httppost.setEntity(stringEntity);
           
            System.out.println("executing request " + httppost.getRequestLine());
            HttpResponse response = httpclient.execute(httppost, localContext);
           
   
            System.out.println(response + "\n");
            for (Cookie c : ((AbstractHttpClient) httpclient).getCookieStore().getCookies())
            {
                System.out.println("\n Cookie: " + c.toString() + "\n");
            }
            
            List<Cookie> cookies = cookieStore.getCookies();
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("Local cookie: " + cookies.get(i));
            }
            
            HttpEntity resEntity = response.getEntity();
            
            System.out.println("----------------------------------------");
            System.out.println(response.getStatusLine());
            if (resEntity != null) {
                System.out.println("Response content length: " + resEntity.getContentLength());
                System.out.println("Chunked?: " + resEntity.isChunked());
                System.out.println(EntityUtils.toString(resEntity));
            }
            EntityUtils.consume(resEntity);
            
      
            StringEntity stringEntity1 = new StringEntity(jsonReq1);
            stringEntity.setContentType("application/json");
            httppost.setEntity(stringEntity1);
            HttpResponse response1 = httpclient.execute(httppost, localContext);
            System.out.println(response1 + "\n");
            for (Cookie c : ((AbstractHttpClient) httpclient).getCookieStore().getCookies())
            {
                System.out.println("\n Cookie: " + c.toString() + "\n");
            }
            
            List<Cookie> cookies1 = cookieStore.getCookies();
            for (int i = 0; i < cookies1.size(); i++) {
                System.out.println("Local cookie: " + cookies1.get(i));
            }
            
            HttpEntity resEntity1 = response1.getEntity();
            
            System.out.println("----------------------------------------");
            System.out.println(response1.getStatusLine());
            if (resEntity1 != null) {
                System.out.println("Response content length: " + resEntity1.getContentLength());
                System.out.println("Chunked?: " + resEntity1.isChunked());
                System.out.println(EntityUtils.toString(resEntity1));
            }
            EntityUtils.consume(resEntity1);
            
            
            // Logout and purge cookie on server
            
            cmLogout logoutReq = new cmLogout();
            logoutReq.setService("logout");
                               
              
            Gson g = new Gson();
            String json2 = g.toJson(logoutReq);          
            
            
            StringEntity stringEntity2 = new StringEntity(json2);
            stringEntity.setContentType("application/json");
            httppost.setEntity(stringEntity2);
            HttpResponse response2 = httpclient.execute(httppost, localContext);
            System.out.println(response2 + "\n");
           
            HttpEntity resEntity2 = response2.getEntity();
            
            System.out.println("----------------------------------------");
            System.out.println(response2.getStatusLine());
            if (resEntity2 != null) {
                System.out.println("Response content length: " + resEntity2.getContentLength());
                System.out.println("Chunked?: " + resEntity2.isChunked());
                System.out.println(EntityUtils.toString(resEntity2));
            }
            EntityUtils.consume(resEntity2);
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
        
    }
    
    public static int fileSpooler() {
    	
    return 0;	
    }

    public static void main(String[] args) {
    	

  
        cmLogin loginReq = new cmLogin();
        loginReq.setService("login");
        loginReq.setUsername("root");
        loginReq.setPassword("system");
        String cmURL = "https://temp61-centos5tor.test:8081/json";
        
        MainReq mainreq = new MainReq();
        mainreq.setService("cmmain");
        mainreq.setCall("getMasterIPs");
        
       jobSubmit myjob = new jobSubmit();
       jobSubmit.jobObject myjobObj = new jobSubmit.jobObject();
       
        myjob.setService("cmjob");
        myjob.setCall("submitJob");
        
        myjobObj.setQueue("defq");
        myjobObj.setJobname("myjob");
        myjobObj.setAccount("root");
        myjobObj.setRundirectory("/home/cmsupport");
        myjobObj.setUsername("root");
        myjobObj.setGroupname("cmsupport");
        myjobObj.setPriority("1");
        myjobObj.setStdinfile("/home/cmsupport/stdin-openmpi");
        myjobObj.setStdoutfile("/home/cmsupport/stdout-openmpi");
        myjobObj.setStderrfile("/home/cmsupport/stderr-openmpi");
        myjobObj.setResourceList(Arrays.asList("nodefeature"));
        myjobObj.setDependencies(Arrays.asList("afterok:42"));
        myjobObj.setMailNotify(true);
        myjobObj.setMailOptions("ALL");
        myjobObj.setMaxWallClock("00:01:00");
        myjobObj.setNumberOfProcesses(1);
        myjobObj.setNumberOfNodes(1);
        myjobObj.setNodes(Arrays.asList("node001","node002"));
        myjobObj.setCommandLineInterpreter("/bin/bash");
        myjobObj.setUserdefined(Arrays.asList("cd /home/cmsupport","date","pwd"));
        myjobObj.setExecutable("mpirun");
        myjobObj.setArguments("hello_mpi");
        myjobObj.setModules(Arrays.asList("openmpi/gcc","shared"));
        myjobObj.setDebug(true);
        myjobObj.setBaseType("Job");
        myjobObj.setIsSlurm(true);
        myjobObj.setUniqueKey(0);
        myjobObj.setModified(false);
        myjobObj.setToBeRemoved(false);
        myjobObj.setChildType("SlurmJob");
        myjobObj.setJobID("Nexus test");
        
        //Map<String,jobSubmit.jobObject > mymap= new HashMap<String, jobSubmit.jobObject>();
        //mymap.put("Slurm",myjobObj);
        ArrayList mylist = new ArrayList();
        mylist.add("slurm");
        mylist.add(myjobObj);
        myjob.setArgs(mylist);
        
        
        GsonBuilder builder = new GsonBuilder();
        builder.enableComplexMapKeySerialization();
        
        //Gson g = new Gson();
        Gson g = builder.create();
        String json = g.toJson(loginReq);          
        System.out.println("JSON Request No. 1 " + json);
        String json1 = g.toJson(mainreq);
        System.out.println("JSON Request No. 2 " + json1);
        String json2 = g.toJson(myjob);
        System.out.println("JSON Request No. 3 " + json2);
        
        // 	To be used from a real console and not Eclipse

    //JSonRequestor AuthRequestor = new JSonRequestor();
    // AuthRequestor.AuthRequest(cmURL);
    	JSonRequestor jSonRequestor = new JSonRequestor();
    //jSonRequestor.doRequest(json, cmURL );
        jSonRequestor.doRequest(json,json2, cmURL );
    }
}


